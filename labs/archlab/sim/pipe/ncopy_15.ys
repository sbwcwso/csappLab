#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
    xorq %rax,%rax		# count = 0;

K_Loop:
    mrmovq (%rdi), %r8
    iaddq $-15, %rdx
    jge Loop_1

    # The Remainder    
    iaddq $8, %rdx
    jl Remainder_0_6
    rmmovq %r8, (%rsi)  # move 0
    jg Remainder_8_14
    jmp Remainder_7
    
Loop_1:
    rmmovq %r8, (%rsi)	# Move 0
    andq %r8, %r8
    mrmovq 0x70(%rdi), %r8
    jle Move_1
    iaddq $1, %rax
Move_15:
    rmmovq %r8, 0x70(%rsi)

Remainder_14:
    andq %r8, %r8	
    mrmovq 0x68(%rdi), %r8
    jle Move_14
    iaddq $1, %rax
Move_14:
    rmmovq %r8, 0x68(%rsi)

Remainder_13:
    andq %r8, %r8	
    mrmovq 0x60(%rdi), %r8
    jle Move_13
    iaddq $1, %rax
Move_13:
    rmmovq %r8, 0x60(%rsi)

Remainder_12:
    andq %r8, %r8	
    mrmovq 0x58(%rdi), %r8
    jle Move_12
    iaddq $1, %rax
Move_12:
    rmmovq %r8, 0x58(%rsi)

Remainder_11:
    andq %r8, %r8	
    mrmovq 0x50(%rdi), %r8
    jle Move_11
    iaddq $1, %rax
Move_11:
    rmmovq %r8, 0x50(%rsi)

Remainder_10:
    andq %r8, %r8
    mrmovq 0x48(%rdi), %r8
    jle Move_10
    iaddq $1, %rax
Move_10:
    rmmovq %r8, 0x48(%rsi)

Remainder_9:
    andq %r8, %r8	
    mrmovq 0x40(%rdi), %r8
    jle Move_9
    iaddq $1, %rax
Move_9:
    rmmovq %r8, 0x40(%rsi)

Remainder_8:
    andq %r8, %r8	
    mrmovq 0x38(%rdi), %r8
    jle Move_8
    iaddq $1, %rax
Move_8:
    rmmovq %r8, 0x38(%rsi)

Remainder_7:
    andq %r8, %r8	
    mrmovq 0x30(%rdi), %r8
    jle Move_7
    iaddq $1, %rax
Move_7:
    rmmovq %r8, 0x30(%rsi)

Remainder_6:
    andq %r8, %r8	
    mrmovq 0x28(%rdi), %r8
    jle Move_6
    iaddq $1, %rax
Move_6:
    rmmovq %r8, 0x28(%rsi)

Remainder_5:
    andq %r8, %r8	
    mrmovq 0x20(%rdi), %r8
    jle Move_5
    iaddq $1, %rax
Move_5:
    rmmovq %r8, 0x20(%rsi)

Remainder_4:
    andq %r8, %r8	
    mrmovq 0x18(%rdi), %r8
    jle Move_4
    iaddq $1, %rax
Move_4:
    rmmovq %r8, 0x18(%rsi)

Remainder_3:
    andq %r8, %r8	
    mrmovq 0x10(%rdi), %r8
    jle Move_3 
    iaddq $1, %rax
Move_3:
    rmmovq %r8, 0x10(%rsi)

Remainder_2:
    andq %r8, %r8	
    mrmovq 0x08(%rdi), %r8
    jle Move_2
    iaddq $1, %rax
Move_2:
    rmmovq %r8, 0x08(%rsi)

Remainder_1:
    andq %r8, %r8
    jle K_loop_inc 
    iaddq $1, %rax
K_loop_inc:
    andq %rdx, %rdx
    jne Continue_Loop
    ret
Continue_Loop:
    iaddq $0x78, %rdi	
    iaddq $0x78, %rsi
    jmp K_Loop


Remainder_0_6:
    iaddq $4, %rdx
    jl Remainder_0_2
    rmmovq %r8, (%rsi)
    je Remainder_3
    # jmp Remainder_4_6

Remainder_4_6:
    iaddq $-2, %rdx
    je Remainder_5
    irmovq $0, %rdx
    jg Remainder_6
    jmp Remainder_4

Remainder_0_2:
    iaddq $2, %rdx
    jl Done
    rmmovq %r8, (%rsi)
    je Remainder_1
    irmovq $0, %rdx
    jmp Remainder_2

Remainder_8_14:
    iaddq $-4, %rdx
    je Remainder_11
    jg Remainder_12_14
    # jmp Remainder_8_9

Remainder_8_9:
  iaddq $2, %rdx
  je Remainder_9
  irmovq $0, %rdx
  jg Remainder_10
  jmp Remainder_8

Remainder_12_14:
  iaddq $-2, %rdx
  je Remainder_13
  irmovq $0, %rdx
  jg Remainder_14
  jmp Remainder_12

  


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
